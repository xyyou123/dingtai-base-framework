package com.dingtai.android.library.video.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.dingtai.android.library.video.model.VodListModel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "VOD_LIST_MODEL".
*/
public class VodListModelDao extends AbstractDao<VodListModel, Long> {

    public static final String TABLENAME = "VOD_LIST_MODEL";

    /**
     * Properties of entity VodListModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property CreateTime = new Property(2, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property ProgramName = new Property(3, String.class, "ProgramName", false, "PROGRAM_NAME");
        public final static Property ProgramLogo = new Property(4, String.class, "ProgramLogo", false, "PROGRAM_LOGO");
        public final static Property IsRec = new Property(5, String.class, "IsRec", false, "IS_REC");
        public final static Property VODChID = new Property(6, String.class, "VODChID", false, "VODCH_ID");
        public final static Property Status = new Property(7, String.class, "Status", false, "STATUS");
        public final static Property ReMark = new Property(8, String.class, "ReMark", false, "RE_MARK");
        public final static Property VODType = new Property(9, String.class, "VODType", false, "VODTYPE");
        public final static Property NewDateTime = new Property(10, String.class, "NewDateTime", false, "NEW_DATE_TIME");
        public final static Property ProgramHornLogo = new Property(11, String.class, "ProgramHornLogo", false, "PROGRAM_HORN_LOGO");
    }


    public VodListModelDao(DaoConfig config) {
        super(config);
    }
    
    public VodListModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VOD_LIST_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ID\" TEXT," + // 1: ID
                "\"CREATE_TIME\" TEXT," + // 2: CreateTime
                "\"PROGRAM_NAME\" TEXT," + // 3: ProgramName
                "\"PROGRAM_LOGO\" TEXT," + // 4: ProgramLogo
                "\"IS_REC\" TEXT," + // 5: IsRec
                "\"VODCH_ID\" TEXT," + // 6: VODChID
                "\"STATUS\" TEXT," + // 7: Status
                "\"RE_MARK\" TEXT," + // 8: ReMark
                "\"VODTYPE\" TEXT," + // 9: VODType
                "\"NEW_DATE_TIME\" TEXT," + // 10: NewDateTime
                "\"PROGRAM_HORN_LOGO\" TEXT);"); // 11: ProgramHornLogo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VOD_LIST_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VodListModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(3, CreateTime);
        }
 
        String ProgramName = entity.getProgramName();
        if (ProgramName != null) {
            stmt.bindString(4, ProgramName);
        }
 
        String ProgramLogo = entity.getProgramLogo();
        if (ProgramLogo != null) {
            stmt.bindString(5, ProgramLogo);
        }
 
        String IsRec = entity.getIsRec();
        if (IsRec != null) {
            stmt.bindString(6, IsRec);
        }
 
        String VODChID = entity.getVODChID();
        if (VODChID != null) {
            stmt.bindString(7, VODChID);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(8, Status);
        }
 
        String ReMark = entity.getReMark();
        if (ReMark != null) {
            stmt.bindString(9, ReMark);
        }
 
        String VODType = entity.getVODType();
        if (VODType != null) {
            stmt.bindString(10, VODType);
        }
 
        String NewDateTime = entity.getNewDateTime();
        if (NewDateTime != null) {
            stmt.bindString(11, NewDateTime);
        }
 
        String ProgramHornLogo = entity.getProgramHornLogo();
        if (ProgramHornLogo != null) {
            stmt.bindString(12, ProgramHornLogo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VodListModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(3, CreateTime);
        }
 
        String ProgramName = entity.getProgramName();
        if (ProgramName != null) {
            stmt.bindString(4, ProgramName);
        }
 
        String ProgramLogo = entity.getProgramLogo();
        if (ProgramLogo != null) {
            stmt.bindString(5, ProgramLogo);
        }
 
        String IsRec = entity.getIsRec();
        if (IsRec != null) {
            stmt.bindString(6, IsRec);
        }
 
        String VODChID = entity.getVODChID();
        if (VODChID != null) {
            stmt.bindString(7, VODChID);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(8, Status);
        }
 
        String ReMark = entity.getReMark();
        if (ReMark != null) {
            stmt.bindString(9, ReMark);
        }
 
        String VODType = entity.getVODType();
        if (VODType != null) {
            stmt.bindString(10, VODType);
        }
 
        String NewDateTime = entity.getNewDateTime();
        if (NewDateTime != null) {
            stmt.bindString(11, NewDateTime);
        }
 
        String ProgramHornLogo = entity.getProgramHornLogo();
        if (ProgramHornLogo != null) {
            stmt.bindString(12, ProgramHornLogo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VodListModel readEntity(Cursor cursor, int offset) {
        VodListModel entity = new VodListModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CreateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProgramName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ProgramLogo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // IsRec
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // VODChID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ReMark
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // VODType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // NewDateTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // ProgramHornLogo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VodListModel entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProgramName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProgramLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsRec(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVODChID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReMark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVODType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNewDateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProgramHornLogo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VodListModel entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VodListModel entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VodListModel entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
