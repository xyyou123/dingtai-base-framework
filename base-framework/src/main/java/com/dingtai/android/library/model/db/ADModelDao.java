package com.dingtai.android.library.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.dingtai.android.library.model.models.ADModel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ADMODEL".
*/
public class ADModelDao extends AbstractDao<ADModel, Long> {

    public static final String TABLENAME = "ADMODEL";

    /**
     * Properties of entity ADModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property GenID = new Property(1, int.class, "GenID", false, "GEN_ID");
        public final static Property ADTypeID = new Property(2, String.class, "ADTypeID", false, "ADTYPE_ID");
        public final static Property ID = new Property(3, String.class, "ID", false, "ID");
        public final static Property ADName = new Property(4, String.class, "ADName", false, "ADNAME");
        public final static Property ImgUrl = new Property(5, String.class, "ImgUrl", false, "IMG_URL");
        public final static Property LinkUrl = new Property(6, String.class, "LinkUrl", false, "LINK_URL");
        public final static Property StID = new Property(7, String.class, "StID", false, "ST_ID");
        public final static Property CreateTime = new Property(8, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property ChID = new Property(9, String.class, "ChID", false, "CH_ID");
        public final static Property ADType = new Property(10, String.class, "ADType", false, "ADTYPE");
        public final static Property ADFor = new Property(11, String.class, "ADFor", false, "ADFOR");
        public final static Property LinkTo = new Property(12, String.class, "LinkTo", false, "LINK_TO");
        public final static Property ResType = new Property(13, String.class, "ResType", false, "RES_TYPE");
        public final static Property ResUrl = new Property(14, String.class, "ResUrl", false, "RES_URL");
        public final static Property LiveChannel = new Property(15, String.class, "LiveChannel", false, "LIVE_CHANNEL");
    }


    public ADModelDao(DaoConfig config) {
        super(config);
    }
    
    public ADModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADMODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"GEN_ID\" INTEGER NOT NULL ," + // 1: GenID
                "\"ADTYPE_ID\" TEXT," + // 2: ADTypeID
                "\"ID\" TEXT," + // 3: ID
                "\"ADNAME\" TEXT," + // 4: ADName
                "\"IMG_URL\" TEXT," + // 5: ImgUrl
                "\"LINK_URL\" TEXT," + // 6: LinkUrl
                "\"ST_ID\" TEXT," + // 7: StID
                "\"CREATE_TIME\" TEXT," + // 8: CreateTime
                "\"CH_ID\" TEXT," + // 9: ChID
                "\"ADTYPE\" TEXT," + // 10: ADType
                "\"ADFOR\" TEXT," + // 11: ADFor
                "\"LINK_TO\" TEXT," + // 12: LinkTo
                "\"RES_TYPE\" TEXT," + // 13: ResType
                "\"RES_URL\" TEXT," + // 14: ResUrl
                "\"LIVE_CHANNEL\" TEXT);"); // 15: LiveChannel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADMODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ADModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getGenID());
 
        String ADTypeID = entity.getADTypeID();
        if (ADTypeID != null) {
            stmt.bindString(3, ADTypeID);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(4, ID);
        }
 
        String ADName = entity.getADName();
        if (ADName != null) {
            stmt.bindString(5, ADName);
        }
 
        String ImgUrl = entity.getImgUrl();
        if (ImgUrl != null) {
            stmt.bindString(6, ImgUrl);
        }
 
        String LinkUrl = entity.getLinkUrl();
        if (LinkUrl != null) {
            stmt.bindString(7, LinkUrl);
        }
 
        String StID = entity.getStID();
        if (StID != null) {
            stmt.bindString(8, StID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(9, CreateTime);
        }
 
        String ChID = entity.getChID();
        if (ChID != null) {
            stmt.bindString(10, ChID);
        }
 
        String ADType = entity.getADType();
        if (ADType != null) {
            stmt.bindString(11, ADType);
        }
 
        String ADFor = entity.getADFor();
        if (ADFor != null) {
            stmt.bindString(12, ADFor);
        }
 
        String LinkTo = entity.getLinkTo();
        if (LinkTo != null) {
            stmt.bindString(13, LinkTo);
        }
 
        String ResType = entity.getResType();
        if (ResType != null) {
            stmt.bindString(14, ResType);
        }
 
        String ResUrl = entity.getResUrl();
        if (ResUrl != null) {
            stmt.bindString(15, ResUrl);
        }
 
        String LiveChannel = entity.getLiveChannel();
        if (LiveChannel != null) {
            stmt.bindString(16, LiveChannel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ADModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getGenID());
 
        String ADTypeID = entity.getADTypeID();
        if (ADTypeID != null) {
            stmt.bindString(3, ADTypeID);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(4, ID);
        }
 
        String ADName = entity.getADName();
        if (ADName != null) {
            stmt.bindString(5, ADName);
        }
 
        String ImgUrl = entity.getImgUrl();
        if (ImgUrl != null) {
            stmt.bindString(6, ImgUrl);
        }
 
        String LinkUrl = entity.getLinkUrl();
        if (LinkUrl != null) {
            stmt.bindString(7, LinkUrl);
        }
 
        String StID = entity.getStID();
        if (StID != null) {
            stmt.bindString(8, StID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(9, CreateTime);
        }
 
        String ChID = entity.getChID();
        if (ChID != null) {
            stmt.bindString(10, ChID);
        }
 
        String ADType = entity.getADType();
        if (ADType != null) {
            stmt.bindString(11, ADType);
        }
 
        String ADFor = entity.getADFor();
        if (ADFor != null) {
            stmt.bindString(12, ADFor);
        }
 
        String LinkTo = entity.getLinkTo();
        if (LinkTo != null) {
            stmt.bindString(13, LinkTo);
        }
 
        String ResType = entity.getResType();
        if (ResType != null) {
            stmt.bindString(14, ResType);
        }
 
        String ResUrl = entity.getResUrl();
        if (ResUrl != null) {
            stmt.bindString(15, ResUrl);
        }
 
        String LiveChannel = entity.getLiveChannel();
        if (LiveChannel != null) {
            stmt.bindString(16, LiveChannel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ADModel readEntity(Cursor cursor, int offset) {
        ADModel entity = new ADModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getInt(offset + 1), // GenID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ADTypeID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ADName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ImgUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // LinkUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // StID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CreateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ChID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ADType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ADFor
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // LinkTo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // ResType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ResUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // LiveChannel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ADModel entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGenID(cursor.getInt(offset + 1));
        entity.setADTypeID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setADName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLinkUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setADType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setADFor(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLinkTo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setResType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setResUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLiveChannel(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ADModel entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ADModel entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ADModel entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
