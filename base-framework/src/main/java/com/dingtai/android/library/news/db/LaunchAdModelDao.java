package com.dingtai.android.library.news.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.dingtai.android.library.news.model.LaunchAdDetailsModel.LaunchAdDetailsModelListConverter;
import com.dingtai.android.library.news.model.LaunchAdModel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "LAUNCH_AD_MODEL".
*/
public class LaunchAdModelDao extends AbstractDao<LaunchAdModel, Long> {

    public static final String TABLENAME = "LAUNCH_AD_MODEL";

    /**
     * Properties of entity LaunchAdModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property CreateTime = new Property(2, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property OpenPicName = new Property(3, String.class, "OpenPicName", false, "OPEN_PIC_NAME");
        public final static Property ImgUrl = new Property(4, String.class, "ImgUrl", false, "IMG_URL");
        public final static Property LinkUrl = new Property(5, String.class, "LinkUrl", false, "LINK_URL");
        public final static Property StID = new Property(6, String.class, "StID", false, "ST_ID");
        public final static Property ChID = new Property(7, String.class, "ChID", false, "CH_ID");
        public final static Property ADFor = new Property(8, String.class, "ADFor", false, "ADFOR");
        public final static Property ADContent = new Property(9, String.class, "ADContent", false, "ADCONTENT");
        public final static Property ForApp = new Property(10, String.class, "ForApp", false, "FOR_APP");
        public final static Property LinkTo = new Property(11, String.class, "LinkTo", false, "LINK_TO");
        public final static Property RandomNum = new Property(12, String.class, "RandomNum", false, "RANDOM_NUM");
        public final static Property Status = new Property(13, String.class, "Status", false, "STATUS");
        public final static Property ReMark = new Property(14, String.class, "ReMark", false, "RE_MARK");
        public final static Property Rural = new Property(15, String.class, "Rural", false, "RURAL");
        public final static Property ImgUrls = new Property(16, String.class, "ImgUrls", false, "IMG_URLS");
        public final static Property OpenTime = new Property(17, String.class, "OpenTime", false, "OPEN_TIME");
        public final static Property OpenPicDetail = new Property(18, String.class, "OpenPicDetail", false, "OPEN_PIC_DETAIL");
    }

    private final LaunchAdDetailsModelListConverter OpenPicDetailConverter = new LaunchAdDetailsModelListConverter();

    public LaunchAdModelDao(DaoConfig config) {
        super(config);
    }
    
    public LaunchAdModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAUNCH_AD_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ID\" TEXT UNIQUE ," + // 1: ID
                "\"CREATE_TIME\" TEXT," + // 2: CreateTime
                "\"OPEN_PIC_NAME\" TEXT," + // 3: OpenPicName
                "\"IMG_URL\" TEXT," + // 4: ImgUrl
                "\"LINK_URL\" TEXT," + // 5: LinkUrl
                "\"ST_ID\" TEXT," + // 6: StID
                "\"CH_ID\" TEXT," + // 7: ChID
                "\"ADFOR\" TEXT," + // 8: ADFor
                "\"ADCONTENT\" TEXT," + // 9: ADContent
                "\"FOR_APP\" TEXT," + // 10: ForApp
                "\"LINK_TO\" TEXT," + // 11: LinkTo
                "\"RANDOM_NUM\" TEXT," + // 12: RandomNum
                "\"STATUS\" TEXT," + // 13: Status
                "\"RE_MARK\" TEXT," + // 14: ReMark
                "\"RURAL\" TEXT," + // 15: Rural
                "\"IMG_URLS\" TEXT," + // 16: ImgUrls
                "\"OPEN_TIME\" TEXT," + // 17: OpenTime
                "\"OPEN_PIC_DETAIL\" TEXT);"); // 18: OpenPicDetail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAUNCH_AD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LaunchAdModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(3, CreateTime);
        }
 
        String OpenPicName = entity.getOpenPicName();
        if (OpenPicName != null) {
            stmt.bindString(4, OpenPicName);
        }
 
        String ImgUrl = entity.getImgUrl();
        if (ImgUrl != null) {
            stmt.bindString(5, ImgUrl);
        }
 
        String LinkUrl = entity.getLinkUrl();
        if (LinkUrl != null) {
            stmt.bindString(6, LinkUrl);
        }
 
        String StID = entity.getStID();
        if (StID != null) {
            stmt.bindString(7, StID);
        }
 
        String ChID = entity.getChID();
        if (ChID != null) {
            stmt.bindString(8, ChID);
        }
 
        String ADFor = entity.getADFor();
        if (ADFor != null) {
            stmt.bindString(9, ADFor);
        }
 
        String ADContent = entity.getADContent();
        if (ADContent != null) {
            stmt.bindString(10, ADContent);
        }
 
        String ForApp = entity.getForApp();
        if (ForApp != null) {
            stmt.bindString(11, ForApp);
        }
 
        String LinkTo = entity.getLinkTo();
        if (LinkTo != null) {
            stmt.bindString(12, LinkTo);
        }
 
        String RandomNum = entity.getRandomNum();
        if (RandomNum != null) {
            stmt.bindString(13, RandomNum);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(14, Status);
        }
 
        String ReMark = entity.getReMark();
        if (ReMark != null) {
            stmt.bindString(15, ReMark);
        }
 
        String Rural = entity.getRural();
        if (Rural != null) {
            stmt.bindString(16, Rural);
        }
 
        String ImgUrls = entity.getImgUrls();
        if (ImgUrls != null) {
            stmt.bindString(17, ImgUrls);
        }
 
        String OpenTime = entity.getOpenTime();
        if (OpenTime != null) {
            stmt.bindString(18, OpenTime);
        }
 
        List OpenPicDetail = entity.getOpenPicDetail();
        if (OpenPicDetail != null) {
            stmt.bindString(19, OpenPicDetailConverter.convertToDatabaseValue(OpenPicDetail));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LaunchAdModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(3, CreateTime);
        }
 
        String OpenPicName = entity.getOpenPicName();
        if (OpenPicName != null) {
            stmt.bindString(4, OpenPicName);
        }
 
        String ImgUrl = entity.getImgUrl();
        if (ImgUrl != null) {
            stmt.bindString(5, ImgUrl);
        }
 
        String LinkUrl = entity.getLinkUrl();
        if (LinkUrl != null) {
            stmt.bindString(6, LinkUrl);
        }
 
        String StID = entity.getStID();
        if (StID != null) {
            stmt.bindString(7, StID);
        }
 
        String ChID = entity.getChID();
        if (ChID != null) {
            stmt.bindString(8, ChID);
        }
 
        String ADFor = entity.getADFor();
        if (ADFor != null) {
            stmt.bindString(9, ADFor);
        }
 
        String ADContent = entity.getADContent();
        if (ADContent != null) {
            stmt.bindString(10, ADContent);
        }
 
        String ForApp = entity.getForApp();
        if (ForApp != null) {
            stmt.bindString(11, ForApp);
        }
 
        String LinkTo = entity.getLinkTo();
        if (LinkTo != null) {
            stmt.bindString(12, LinkTo);
        }
 
        String RandomNum = entity.getRandomNum();
        if (RandomNum != null) {
            stmt.bindString(13, RandomNum);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(14, Status);
        }
 
        String ReMark = entity.getReMark();
        if (ReMark != null) {
            stmt.bindString(15, ReMark);
        }
 
        String Rural = entity.getRural();
        if (Rural != null) {
            stmt.bindString(16, Rural);
        }
 
        String ImgUrls = entity.getImgUrls();
        if (ImgUrls != null) {
            stmt.bindString(17, ImgUrls);
        }
 
        String OpenTime = entity.getOpenTime();
        if (OpenTime != null) {
            stmt.bindString(18, OpenTime);
        }
 
        List OpenPicDetail = entity.getOpenPicDetail();
        if (OpenPicDetail != null) {
            stmt.bindString(19, OpenPicDetailConverter.convertToDatabaseValue(OpenPicDetail));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LaunchAdModel readEntity(Cursor cursor, int offset) {
        LaunchAdModel entity = new LaunchAdModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CreateTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // OpenPicName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ImgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // LinkUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // StID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ChID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ADFor
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ADContent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ForApp
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // LinkTo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // RandomNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Status
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ReMark
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Rural
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ImgUrls
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // OpenTime
            cursor.isNull(offset + 18) ? null : OpenPicDetailConverter.convertToEntityProperty(cursor.getString(offset + 18)) // OpenPicDetail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LaunchAdModel entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpenPicName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLinkUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setADFor(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setADContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setForApp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLinkTo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRandomNum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReMark(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRural(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setImgUrls(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setOpenTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setOpenPicDetail(cursor.isNull(offset + 18) ? null : OpenPicDetailConverter.convertToEntityProperty(cursor.getString(offset + 18)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LaunchAdModel entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LaunchAdModel entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LaunchAdModel entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
