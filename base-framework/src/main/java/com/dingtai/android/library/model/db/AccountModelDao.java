package com.dingtai.android.library.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.dingtai.android.library.model.models.AccountModel;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ACCOUNT_MODEL".
*/
public class AccountModelDao extends AbstractDao<AccountModel, Long> {

    public static final String TABLENAME = "ACCOUNT_MODEL";

    /**
     * Properties of entity AccountModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property UserGUID = new Property(2, String.class, "UserGUID", false, "USER_GUID");
        public final static Property CreateTime = new Property(3, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property UserNickName = new Property(4, String.class, "UserNickName", false, "USER_NICK_NAME");
        public final static Property UserName = new Property(5, String.class, "UserName", false, "USER_NAME");
        public final static Property UserRealName = new Property(6, String.class, "UserRealName", false, "USER_REAL_NAME");
        public final static Property UserIcon = new Property(7, String.class, "UserIcon", false, "USER_ICON");
        public final static Property UserEmail = new Property(8, String.class, "UserEmail", false, "USER_EMAIL");
        public final static Property UserPhone = new Property(9, String.class, "UserPhone", false, "USER_PHONE");
        public final static Property UserAddress = new Property(10, String.class, "UserAddress", false, "USER_ADDRESS");
        public final static Property UserZipPost = new Property(11, String.class, "UserZipPost", false, "USER_ZIP_POST");
        public final static Property UserScore = new Property(12, String.class, "UserScore", false, "USER_SCORE");
        public final static Property UserSource = new Property(13, String.class, "UserSource", false, "USER_SOURCE");
        public final static Property UserSex = new Property(14, String.class, "UserSex", false, "USER_SEX");
        public final static Property LoginMode = new Property(15, String.class, "LoginMode", false, "LOGIN_MODE");
        public final static Property InviteCode = new Property(16, String.class, "InviteCode", false, "INVITE_CODE");
        public final static Property Steps = new Property(17, String.class, "steps", false, "STEPS");
        public final static Property DeptName = new Property(18, String.class, "DeptName", false, "DEPT_NAME");
        public final static Property IDNum = new Property(19, String.class, "IDNum", false, "IDNUM");
        public final static Property IsLive = new Property(20, String.class, "IsLive", false, "IS_LIVE");
        public final static Property LiveUrl = new Property(21, String.class, "LiveUrl", false, "LIVE_URL");
        public final static Property IsEvent = new Property(22, String.class, "IsEvent", false, "IS_EVENT");
        public final static Property BandName = new Property(23, String.class, "BandName", false, "BAND_NAME");
        public final static Property QQAccount = new Property(24, String.class, "QQAccount", false, "QQACCOUNT");
        public final static Property WeixinAccount = new Property(25, String.class, "WeixinAccount", false, "WEIXIN_ACCOUNT");
        public final static Property FootprintCount = new Property(26, String.class, "FootprintCount", false, "FOOTPRINT_COUNT");
        public final static Property JoinCount = new Property(27, String.class, "JoinCount", false, "JOIN_COUNT");
        public final static Property WeiboAccount = new Property(28, String.class, "WeiboAccount", false, "WEIBO_ACCOUNT");
        public final static Property IsPoliticalPower = new Property(29, String.class, "IsPoliticalPower", false, "IS_POLITICAL_POWER");
        public final static Property IsVM = new Property(30, String.class, "IsVM", false, "IS_VM");
        public final static Property ProducerID = new Property(31, String.class, "ProducerID", false, "PRODUCER_ID");
        public final static Property IsAuthentication = new Property(32, String.class, "IsAuthentication", false, "IS_AUTHENTICATION");
    }


    public AccountModelDao(DaoConfig config) {
        super(config);
    }
    
    public AccountModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"ID\" TEXT," + // 1: ID
                "\"USER_GUID\" TEXT," + // 2: UserGUID
                "\"CREATE_TIME\" TEXT," + // 3: CreateTime
                "\"USER_NICK_NAME\" TEXT," + // 4: UserNickName
                "\"USER_NAME\" TEXT," + // 5: UserName
                "\"USER_REAL_NAME\" TEXT," + // 6: UserRealName
                "\"USER_ICON\" TEXT," + // 7: UserIcon
                "\"USER_EMAIL\" TEXT," + // 8: UserEmail
                "\"USER_PHONE\" TEXT," + // 9: UserPhone
                "\"USER_ADDRESS\" TEXT," + // 10: UserAddress
                "\"USER_ZIP_POST\" TEXT," + // 11: UserZipPost
                "\"USER_SCORE\" TEXT," + // 12: UserScore
                "\"USER_SOURCE\" TEXT," + // 13: UserSource
                "\"USER_SEX\" TEXT," + // 14: UserSex
                "\"LOGIN_MODE\" TEXT," + // 15: LoginMode
                "\"INVITE_CODE\" TEXT," + // 16: InviteCode
                "\"STEPS\" TEXT," + // 17: steps
                "\"DEPT_NAME\" TEXT," + // 18: DeptName
                "\"IDNUM\" TEXT," + // 19: IDNum
                "\"IS_LIVE\" TEXT," + // 20: IsLive
                "\"LIVE_URL\" TEXT," + // 21: LiveUrl
                "\"IS_EVENT\" TEXT," + // 22: IsEvent
                "\"BAND_NAME\" TEXT," + // 23: BandName
                "\"QQACCOUNT\" TEXT," + // 24: QQAccount
                "\"WEIXIN_ACCOUNT\" TEXT," + // 25: WeixinAccount
                "\"FOOTPRINT_COUNT\" TEXT," + // 26: FootprintCount
                "\"JOIN_COUNT\" TEXT," + // 27: JoinCount
                "\"WEIBO_ACCOUNT\" TEXT," + // 28: WeiboAccount
                "\"IS_POLITICAL_POWER\" TEXT," + // 29: IsPoliticalPower
                "\"IS_VM\" TEXT," + // 30: IsVM
                "\"PRODUCER_ID\" TEXT," + // 31: ProducerID
                "\"IS_AUTHENTICATION\" TEXT);"); // 32: IsAuthentication
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccountModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String UserGUID = entity.getUserGUID();
        if (UserGUID != null) {
            stmt.bindString(3, UserGUID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(4, CreateTime);
        }
 
        String UserNickName = entity.getUserNickName();
        if (UserNickName != null) {
            stmt.bindString(5, UserNickName);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(6, UserName);
        }
 
        String UserRealName = entity.getUserRealName();
        if (UserRealName != null) {
            stmt.bindString(7, UserRealName);
        }
 
        String UserIcon = entity.getUserIcon();
        if (UserIcon != null) {
            stmt.bindString(8, UserIcon);
        }
 
        String UserEmail = entity.getUserEmail();
        if (UserEmail != null) {
            stmt.bindString(9, UserEmail);
        }
 
        String UserPhone = entity.getUserPhone();
        if (UserPhone != null) {
            stmt.bindString(10, UserPhone);
        }
 
        String UserAddress = entity.getUserAddress();
        if (UserAddress != null) {
            stmt.bindString(11, UserAddress);
        }
 
        String UserZipPost = entity.getUserZipPost();
        if (UserZipPost != null) {
            stmt.bindString(12, UserZipPost);
        }
 
        String UserScore = entity.getUserScore();
        if (UserScore != null) {
            stmt.bindString(13, UserScore);
        }
 
        String UserSource = entity.getUserSource();
        if (UserSource != null) {
            stmt.bindString(14, UserSource);
        }
 
        String UserSex = entity.getUserSex();
        if (UserSex != null) {
            stmt.bindString(15, UserSex);
        }
 
        String LoginMode = entity.getLoginMode();
        if (LoginMode != null) {
            stmt.bindString(16, LoginMode);
        }
 
        String InviteCode = entity.getInviteCode();
        if (InviteCode != null) {
            stmt.bindString(17, InviteCode);
        }
 
        String steps = entity.getSteps();
        if (steps != null) {
            stmt.bindString(18, steps);
        }
 
        String DeptName = entity.getDeptName();
        if (DeptName != null) {
            stmt.bindString(19, DeptName);
        }
 
        String IDNum = entity.getIDNum();
        if (IDNum != null) {
            stmt.bindString(20, IDNum);
        }
 
        String IsLive = entity.getIsLive();
        if (IsLive != null) {
            stmt.bindString(21, IsLive);
        }
 
        String LiveUrl = entity.getLiveUrl();
        if (LiveUrl != null) {
            stmt.bindString(22, LiveUrl);
        }
 
        String IsEvent = entity.getIsEvent();
        if (IsEvent != null) {
            stmt.bindString(23, IsEvent);
        }
 
        String BandName = entity.getBandName();
        if (BandName != null) {
            stmt.bindString(24, BandName);
        }
 
        String QQAccount = entity.getQQAccount();
        if (QQAccount != null) {
            stmt.bindString(25, QQAccount);
        }
 
        String WeixinAccount = entity.getWeixinAccount();
        if (WeixinAccount != null) {
            stmt.bindString(26, WeixinAccount);
        }
 
        String FootprintCount = entity.getFootprintCount();
        if (FootprintCount != null) {
            stmt.bindString(27, FootprintCount);
        }
 
        String JoinCount = entity.getJoinCount();
        if (JoinCount != null) {
            stmt.bindString(28, JoinCount);
        }
 
        String WeiboAccount = entity.getWeiboAccount();
        if (WeiboAccount != null) {
            stmt.bindString(29, WeiboAccount);
        }
 
        String IsPoliticalPower = entity.getIsPoliticalPower();
        if (IsPoliticalPower != null) {
            stmt.bindString(30, IsPoliticalPower);
        }
 
        String IsVM = entity.getIsVM();
        if (IsVM != null) {
            stmt.bindString(31, IsVM);
        }
 
        String ProducerID = entity.getProducerID();
        if (ProducerID != null) {
            stmt.bindString(32, ProducerID);
        }
 
        String IsAuthentication = entity.getIsAuthentication();
        if (IsAuthentication != null) {
            stmt.bindString(33, IsAuthentication);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccountModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String UserGUID = entity.getUserGUID();
        if (UserGUID != null) {
            stmt.bindString(3, UserGUID);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(4, CreateTime);
        }
 
        String UserNickName = entity.getUserNickName();
        if (UserNickName != null) {
            stmt.bindString(5, UserNickName);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(6, UserName);
        }
 
        String UserRealName = entity.getUserRealName();
        if (UserRealName != null) {
            stmt.bindString(7, UserRealName);
        }
 
        String UserIcon = entity.getUserIcon();
        if (UserIcon != null) {
            stmt.bindString(8, UserIcon);
        }
 
        String UserEmail = entity.getUserEmail();
        if (UserEmail != null) {
            stmt.bindString(9, UserEmail);
        }
 
        String UserPhone = entity.getUserPhone();
        if (UserPhone != null) {
            stmt.bindString(10, UserPhone);
        }
 
        String UserAddress = entity.getUserAddress();
        if (UserAddress != null) {
            stmt.bindString(11, UserAddress);
        }
 
        String UserZipPost = entity.getUserZipPost();
        if (UserZipPost != null) {
            stmt.bindString(12, UserZipPost);
        }
 
        String UserScore = entity.getUserScore();
        if (UserScore != null) {
            stmt.bindString(13, UserScore);
        }
 
        String UserSource = entity.getUserSource();
        if (UserSource != null) {
            stmt.bindString(14, UserSource);
        }
 
        String UserSex = entity.getUserSex();
        if (UserSex != null) {
            stmt.bindString(15, UserSex);
        }
 
        String LoginMode = entity.getLoginMode();
        if (LoginMode != null) {
            stmt.bindString(16, LoginMode);
        }
 
        String InviteCode = entity.getInviteCode();
        if (InviteCode != null) {
            stmt.bindString(17, InviteCode);
        }
 
        String steps = entity.getSteps();
        if (steps != null) {
            stmt.bindString(18, steps);
        }
 
        String DeptName = entity.getDeptName();
        if (DeptName != null) {
            stmt.bindString(19, DeptName);
        }
 
        String IDNum = entity.getIDNum();
        if (IDNum != null) {
            stmt.bindString(20, IDNum);
        }
 
        String IsLive = entity.getIsLive();
        if (IsLive != null) {
            stmt.bindString(21, IsLive);
        }
 
        String LiveUrl = entity.getLiveUrl();
        if (LiveUrl != null) {
            stmt.bindString(22, LiveUrl);
        }
 
        String IsEvent = entity.getIsEvent();
        if (IsEvent != null) {
            stmt.bindString(23, IsEvent);
        }
 
        String BandName = entity.getBandName();
        if (BandName != null) {
            stmt.bindString(24, BandName);
        }
 
        String QQAccount = entity.getQQAccount();
        if (QQAccount != null) {
            stmt.bindString(25, QQAccount);
        }
 
        String WeixinAccount = entity.getWeixinAccount();
        if (WeixinAccount != null) {
            stmt.bindString(26, WeixinAccount);
        }
 
        String FootprintCount = entity.getFootprintCount();
        if (FootprintCount != null) {
            stmt.bindString(27, FootprintCount);
        }
 
        String JoinCount = entity.getJoinCount();
        if (JoinCount != null) {
            stmt.bindString(28, JoinCount);
        }
 
        String WeiboAccount = entity.getWeiboAccount();
        if (WeiboAccount != null) {
            stmt.bindString(29, WeiboAccount);
        }
 
        String IsPoliticalPower = entity.getIsPoliticalPower();
        if (IsPoliticalPower != null) {
            stmt.bindString(30, IsPoliticalPower);
        }
 
        String IsVM = entity.getIsVM();
        if (IsVM != null) {
            stmt.bindString(31, IsVM);
        }
 
        String ProducerID = entity.getProducerID();
        if (ProducerID != null) {
            stmt.bindString(32, ProducerID);
        }
 
        String IsAuthentication = entity.getIsAuthentication();
        if (IsAuthentication != null) {
            stmt.bindString(33, IsAuthentication);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccountModel readEntity(Cursor cursor, int offset) {
        AccountModel entity = new AccountModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserGUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CreateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UserNickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // UserName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // UserRealName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // UserIcon
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // UserEmail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // UserPhone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UserAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UserZipPost
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // UserScore
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // UserSource
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // UserSex
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // LoginMode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // InviteCode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // steps
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // DeptName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // IDNum
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // IsLive
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // LiveUrl
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // IsEvent
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // BandName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // QQAccount
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // WeixinAccount
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // FootprintCount
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // JoinCount
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // WeiboAccount
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // IsPoliticalPower
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // IsVM
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // ProducerID
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // IsAuthentication
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccountModel entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserGUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserRealName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserIcon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserZipPost(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserScore(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserSource(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserSex(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLoginMode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInviteCode(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSteps(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDeptName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIDNum(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsLive(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLiveUrl(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIsEvent(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBandName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setQQAccount(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setWeixinAccount(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setFootprintCount(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setJoinCount(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setWeiboAccount(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setIsPoliticalPower(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIsVM(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setProducerID(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setIsAuthentication(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccountModel entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccountModel entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccountModel entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
