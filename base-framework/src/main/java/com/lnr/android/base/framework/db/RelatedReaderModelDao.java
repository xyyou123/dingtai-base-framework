package com.lnr.android.base.framework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dingtai.android.library.news.model.RelatedReaderModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RELATED_READER_MODEL".
*/
public class RelatedReaderModelDao extends AbstractDao<RelatedReaderModel, Long> {

    public static final String TABLENAME = "RELATED_READER_MODEL";

    /**
     * Properties of entity RelatedReaderModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property RelatedID = new Property(1, String.class, "RelatedID", false, "RELATED_ID");
        public final static Property RelatedTitle = new Property(2, String.class, "RelatedTitle", false, "RELATED_TITLE");
        public final static Property RelatedResourceGUID = new Property(3, String.class, "RelatedResourceGUID", false, "RELATED_RESOURCE_GUID");
        public final static Property RelatedCreateTime = new Property(4, String.class, "RelatedCreateTime", false, "RELATED_CREATE_TIME");
        public final static Property ResourceGUID = new Property(5, String.class, "ResourceGUID", false, "RESOURCE_GUID");
        public final static Property RelatedRPID = new Property(6, String.class, "RelatedRPID", false, "RELATED_RPID");
        public final static Property RelatedChID = new Property(7, String.class, "RelatedChID", false, "RELATED_CH_ID");
        public final static Property RelatedResourceType = new Property(8, String.class, "RelatedResourceType", false, "RELATED_RESOURCE_TYPE");
        public final static Property RelatedResourceUrl = new Property(9, String.class, "RelatedResourceUrl", false, "RELATED_RESOURCE_URL");
        public final static Property RelatedSmallPicUrl = new Property(10, String.class, "RelatedSmallPicUrl", false, "RELATED_SMALL_PIC_URL");
        public final static Property RelatedIsNewTopice = new Property(11, String.class, "RelatedIsNewTopice", false, "RELATED_IS_NEW_TOPICE");
    }


    public RelatedReaderModelDao(DaoConfig config) {
        super(config);
    }
    
    public RelatedReaderModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RELATED_READER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"RELATED_ID\" TEXT," + // 1: RelatedID
                "\"RELATED_TITLE\" TEXT," + // 2: RelatedTitle
                "\"RELATED_RESOURCE_GUID\" TEXT," + // 3: RelatedResourceGUID
                "\"RELATED_CREATE_TIME\" TEXT," + // 4: RelatedCreateTime
                "\"RESOURCE_GUID\" TEXT," + // 5: ResourceGUID
                "\"RELATED_RPID\" TEXT," + // 6: RelatedRPID
                "\"RELATED_CH_ID\" TEXT," + // 7: RelatedChID
                "\"RELATED_RESOURCE_TYPE\" TEXT," + // 8: RelatedResourceType
                "\"RELATED_RESOURCE_URL\" TEXT," + // 9: RelatedResourceUrl
                "\"RELATED_SMALL_PIC_URL\" TEXT," + // 10: RelatedSmallPicUrl
                "\"RELATED_IS_NEW_TOPICE\" TEXT);"); // 11: RelatedIsNewTopice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RELATED_READER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RelatedReaderModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String RelatedID = entity.getRelatedID();
        if (RelatedID != null) {
            stmt.bindString(2, RelatedID);
        }
 
        String RelatedTitle = entity.getRelatedTitle();
        if (RelatedTitle != null) {
            stmt.bindString(3, RelatedTitle);
        }
 
        String RelatedResourceGUID = entity.getRelatedResourceGUID();
        if (RelatedResourceGUID != null) {
            stmt.bindString(4, RelatedResourceGUID);
        }
 
        String RelatedCreateTime = entity.getRelatedCreateTime();
        if (RelatedCreateTime != null) {
            stmt.bindString(5, RelatedCreateTime);
        }
 
        String ResourceGUID = entity.getResourceGUID();
        if (ResourceGUID != null) {
            stmt.bindString(6, ResourceGUID);
        }
 
        String RelatedRPID = entity.getRelatedRPID();
        if (RelatedRPID != null) {
            stmt.bindString(7, RelatedRPID);
        }
 
        String RelatedChID = entity.getRelatedChID();
        if (RelatedChID != null) {
            stmt.bindString(8, RelatedChID);
        }
 
        String RelatedResourceType = entity.getRelatedResourceType();
        if (RelatedResourceType != null) {
            stmt.bindString(9, RelatedResourceType);
        }
 
        String RelatedResourceUrl = entity.getRelatedResourceUrl();
        if (RelatedResourceUrl != null) {
            stmt.bindString(10, RelatedResourceUrl);
        }
 
        String RelatedSmallPicUrl = entity.getRelatedSmallPicUrl();
        if (RelatedSmallPicUrl != null) {
            stmt.bindString(11, RelatedSmallPicUrl);
        }
 
        String RelatedIsNewTopice = entity.getRelatedIsNewTopice();
        if (RelatedIsNewTopice != null) {
            stmt.bindString(12, RelatedIsNewTopice);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RelatedReaderModel entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String RelatedID = entity.getRelatedID();
        if (RelatedID != null) {
            stmt.bindString(2, RelatedID);
        }
 
        String RelatedTitle = entity.getRelatedTitle();
        if (RelatedTitle != null) {
            stmt.bindString(3, RelatedTitle);
        }
 
        String RelatedResourceGUID = entity.getRelatedResourceGUID();
        if (RelatedResourceGUID != null) {
            stmt.bindString(4, RelatedResourceGUID);
        }
 
        String RelatedCreateTime = entity.getRelatedCreateTime();
        if (RelatedCreateTime != null) {
            stmt.bindString(5, RelatedCreateTime);
        }
 
        String ResourceGUID = entity.getResourceGUID();
        if (ResourceGUID != null) {
            stmt.bindString(6, ResourceGUID);
        }
 
        String RelatedRPID = entity.getRelatedRPID();
        if (RelatedRPID != null) {
            stmt.bindString(7, RelatedRPID);
        }
 
        String RelatedChID = entity.getRelatedChID();
        if (RelatedChID != null) {
            stmt.bindString(8, RelatedChID);
        }
 
        String RelatedResourceType = entity.getRelatedResourceType();
        if (RelatedResourceType != null) {
            stmt.bindString(9, RelatedResourceType);
        }
 
        String RelatedResourceUrl = entity.getRelatedResourceUrl();
        if (RelatedResourceUrl != null) {
            stmt.bindString(10, RelatedResourceUrl);
        }
 
        String RelatedSmallPicUrl = entity.getRelatedSmallPicUrl();
        if (RelatedSmallPicUrl != null) {
            stmt.bindString(11, RelatedSmallPicUrl);
        }
 
        String RelatedIsNewTopice = entity.getRelatedIsNewTopice();
        if (RelatedIsNewTopice != null) {
            stmt.bindString(12, RelatedIsNewTopice);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RelatedReaderModel readEntity(Cursor cursor, int offset) {
        RelatedReaderModel entity = new RelatedReaderModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RelatedID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // RelatedTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RelatedResourceGUID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // RelatedCreateTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ResourceGUID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RelatedRPID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // RelatedChID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // RelatedResourceType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RelatedResourceUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // RelatedSmallPicUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // RelatedIsNewTopice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RelatedReaderModel entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRelatedID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRelatedTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRelatedResourceGUID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRelatedCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResourceGUID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRelatedRPID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRelatedChID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRelatedResourceType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRelatedResourceUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRelatedSmallPicUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRelatedIsNewTopice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RelatedReaderModel entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RelatedReaderModel entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RelatedReaderModel entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
